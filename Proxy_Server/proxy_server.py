import os
import uvicorn
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import openai
import json

# âœ… Load your OpenAI key from environment
openai.api_key = os.getenv("OPENAI_API_KEY")

app = FastAPI() 

class PromptRequest(BaseModel):
    prompt: str

class LessonLayout(BaseModel):
    backgroundColor: str
    fontColor: str

class LessonSlide(BaseModel):
    type: str
    title: str
    content: str
    notes: str
    scripture: str
    quote: str
    imagePrompt: str
    layout: LessonLayout

class Lesson(BaseModel):
    title: str
    author: str
    slides: list[LessonSlide]

# ðŸ”§ System prompt with full enrichment baked in
SYSTEM_PROMPT = """
You are a highly detailed lesson generator AI.

ONLY return valid JSON â€” NO markdown, NO explanations.

Lesson output must match this format strictly:
{
  "title": "...",
  "author": "Generated by AI",
  "slides": [
    {
      "type": "SlideType",
      "title": "...",
      "content": "...",
      "notes": "...",
      "scripture": "...",
      "quote": "...",
      "imagePrompt": "...",
      "layout": {
        "backgroundColor": "#FFFFFF",
        "fontColor": "#000000"
      }
    }
  ]
}

Ensure rich content, historical context, relevant quotes, scriptures, practical applications, and depth of teaching.
"""

@app.post("/generate-lesson")
async def generate_lesson(request: PromptRequest):
    try:
        full_prompt = f"{SYSTEM_PROMPT}\n\n{request.prompt}"

        response = openai.ChatCompletion.create(
            model="gpt-4o",  # or "gpt-4o"
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": request.prompt}
            ],
            temperature=0.4,
            max_tokens=4000,
            response_format="json"
        )

        content = response.choices[0].message.content

        # Validate response parses correctly
        parsed_lesson = json.loads(content)
        return parsed_lesson

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


if __name__ == "__main__":
    uvicorn.run("proxy_server:app", host="0.0.0.0", port=8000)
